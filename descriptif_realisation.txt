# DESCRIPTIF DE RÉALISATION - INTERFACE ADMINISTRATEUR MOTHERGATES

## 1. PRÉSENTATION DU PROJET
---------------------------
### 1.1 Contexte
Cette application desktop constitue l'interface administrateur du site web "SlayerGates", une plateforme d'organisation de tournois e-sport interacadémique. L'écosystème complet comprend :

• Le site web SlayerGates (front-end public)
  - Interface utilisateur pour les étudiants et équipes
  - Inscription aux tournois
  - Consultation des matchs et résultats

• L'interface administrateur MotherGates (présent projet)
  - Application desktop pour la gestion administrative
  - Contrôle total de la plateforme
  - Accès sécurisé aux fonctionnalités d'administration

• Une API backend commune
  - Gestion des requêtes
  - Authentification et autorisation
  - Communication avec la base de données

Les deux applications (site web et interface admin) partagent une base de données PostgreSQL commune hébergée sur Neon.tech, garantissant une cohérence parfaite des données.

### 1.2 Structure de la Base de Données
L'application s'appuie sur une base de données PostgreSQL relationnelle avec les tables suivantes :

#### • User (Utilisateurs)
- Informations de base : id, pseudo, email, mot de passe
- Gestion des rôles : role (user par défaut)
- Profil : avatar
- Relations :
  * Créateur de tournois
  * Capitaine d'équipes
  * Membre d'équipes
  * Demandes d'adhésion

#### • Tournament (Tournois)
- Informations générales : titre, jeu, description
- Configuration : format, max_players, players_per_team
- Localisation : is_online, location
- Dates : start_date, end_date
- État : status (upcoming par défaut)
- Relations :
  * Créateur (User)
  * Équipes participantes
  * Matchs

#### • School (Écoles)
- Informations : id, nom (unique), ville
- Relations :
  * Équipes affiliées

#### • Team (Équipes)
- Informations : nom, description, logo
- Organisation : school_id, captain_id
- Relations :
  * École d'appartenance
  * Capitaine (User)
  * Membres
  * Tournois
  * Matchs
  * Classement

#### • Match (Matchs)
- Configuration : tournament_id, round
- Équipes : team1_id, team2_id
- Résultats : winner_id, score
- État : status (pending par défaut)
- Planification : scheduled_time, completed_time

#### • TeamMember (Membres d'équipe)
- Relations : team_id, user_id
- Rôle dans l'équipe : role (member par défaut)
- Suivi : joined_at

#### • TournamentTeam (Inscriptions aux tournois)
- Relations : tournament_id, team_id
- Participants : participating_players (IDs)
- Suivi : registered_at

#### • TeamJoinRequest (Demandes d'adhésion)
- Relations : team_id, user_id
- État : status (PENDING, APPROVED, REJECTED)
- Suivi : created_at, updated_at

#### • Leaderboard (Classements)
- Relations : team_id (unique)
- Statistiques : points, wins, losses
- Suivi : created_at, updated_at

Cette structure permet une gestion complète et cohérente des données entre le site web SlayerGates et l'interface administrateur MotherGates, avec un suivi précis des relations entre les différentes entités.

### 1.3 Objectifs
• Administration complète des tournois e-sport
• Gestion des écoles et de leurs équipes
• Supervision des utilisateurs et de leurs droits
• Suivi en temps réel des matchs
• Traçabilité des actions administratives
• Sécurisation des accès et des données

## 2. ÉTAT D'AVANCEMENT
----------------------
### 2.1 Fonctionnalités Implémentées

#### Gestion des Tournois
✓ Création de tournois avec paramètres complets
✓ Vue des inscriptions aux tournois
✓ Suivi des places disponibles avec indicateur visuel
✓ Suppression sécurisée des tournois
✓ Validation des données de création

#### Gestion des Écoles
✓ Interface de création d'écoles
✓ Liste des écoles avec nom et ville
✓ Suppression d'écoles (avec vérification des équipes)
✓ Interface utilisateur intuitive

#### Gestion des Équipes
✓ Vue des équipes par école
✓ Gestion des membres d'équipe
✓ Association école-équipe
✓ Suivi des inscriptions aux tournois

#### Système de Logs
✓ Structure de base implémentée
✓ Préparation pour le suivi des actions

#### Sécurité
✓ Création d'administrateurs
✓ Protection des données sensibles (.env)
✓ Validation des entrées utilisateur

### 2.2 Fonctionnalités en Cours
• Gestion complète des matchs
• Système de logs avancé
• Gestion des utilisateurs standard
• Interface de statistiques

### 2.3 Améliorations Prévues
• Filtres avancés pour les tournois
• Système de notifications
• Export des données
• Interface de reporting

## 3. ASPECTS TECHNIQUES
-----------------------
### 3.1 Technologies Utilisées

#### Backend
• Python 3.10+
• SQLAlchemy (ORM)
• PostgreSQL 15+ (Neon.tech)

#### Frontend (Desktop)
• PyQt6
• Qt Designer (interface graphique)

#### Sécurité
• JWT pour l'authentification
• Hashage des mots de passe
• Variables d'environnement

#### Outils de Développement
• Git pour le versioning
• GitHub pour l'hébergement
• Python venv pour l'isolation

### 3.2 Architecture
• Architecture MVC adaptée
• Services métier isolés
• Interface modulaire (widgets)
• Base de données relationnelle

## 4. DÉPLOIEMENT
----------------
### 4.1 Prérequis Système
• Python 3.10 ou supérieur
• PostgreSQL 15+
• Ordinateur compatible (Windows/Linux/MacOS)
• Connexion Internet stable
• Écran haute résolution (recommandé)

### 4.2 Installation
1. Clonage du dépôt GitHub
2. Configuration de l'environnement virtuel
3. Installation des dépendances
4. Configuration des variables d'environnement

### 4.3 Maintenance
• Logs automatiques des erreurs
• Sauvegarde régulière des données
• Mises à jour via Git
• Support technique disponible
